//180417

//Unrepeat data form 1 column 
SELECT DISTINCT 

//To devide value
SELECT Price/3 AS Discount FROM Products 

//To get value between certain amount
SELECT * FROM [Products] WHERE Price BETWEEN 20 and 50

SELECT * FROM [Suppliers] WHERE Country IN ('UK', 'USA')

//Contain different value ( % be front = front got word)
SELECT * FROM [Customers] WHERE City LIKE '%Ber%'
Underscore _ for single character

Null or Not Null

//Sorting 
ORDER BY salary, ??? DESC (aessending by default)
//It will sort front element then behind


//Part 2
Count can be any variable type
Max Min Average Sum only can be use on numberical


SELECT COUNT(Country) AS Country, COUNT(DISTINCT Country) AS TOTAL_CITY FROM Customers

SELECT SupplierID, COUNT(ProductName) AS Total_Amount_Product, SUM(Price) AS Total_Price, AVG(Price) AS Average_Price, MAX(Price) AS MAX, MIN(Price) AS MIN FROM Products GROUP BY SupplierID

GROUP BY + HAVING
SELECT SupplierID, COUNT(ProductName) AS TOTAL_PRODUCT FROM Products GROUP BY SupplierID HAVING COUNT(ProductName) > 4

SELECT StaffNo, StaffName FROM Staff WHERE BranchNo = (SELECT BranchNo FROM Branch WHERE Address = '???')
// WHERE ____ must (Outside) same as SELECT _____ (Inside)

SELECT SupplierID, SupplierName FROM Suppliers WHERE SupplierID IN (SELECT SupplierID FROM Products WHERE PRICE < 20)
//Replace = with IN so it will return more than 1 value

LIMIT >> use to fix to show how many data

/*-----------------------------------------------------------------------------------------------------*/

/*Create Table That Contain Stuends Data*/
CREATE TABLE Students
(
MatricsNo nvarchar(6) not null,
StudentName nvarchar(50) not null,
Gender char not null,
PhoneNo nvarchar(20) UNIQUE DEFAULT '-',
Course nvarchar(30) not null,
Inasis nvarchar(30) not null DEFAULT '-',
Origin nvarchar(30) DEFAULT 'UNKNOWN',

/*Set MatricsNo as primary key*/
CONSTRAINT PK_Students PRIMARY KEY(MatricsNo),
/*Set MatricsNo length must be 6 digit*/
CONSTRAINT Check_Matrics CHECK (len(MatricsNo)=6)
)
go

/*Set the Table Student arrange assecending order follow by matrics*/
CREATE INDEX IndexMatricsNo on Students
(
MatricsNo ASC
)
go

/*Set Constraint on gender to be fill either M or F*/
ALTER TABLE Students 
ADD CONSTRAINT Gender
CHECK (VALUE IN ('M','F'))
go

/*Set Course default value as unregister*/
ALTER TABLE Students
ADD CONSTRAINT Course
DEFAULT 'UNREGISTER' 
go

/*Create Table That Contain Course Data*/
CREATE TABLE Courses
(
CourseCode varchar(8) NOT NULL PRIMARY KEY,
CourseName varchar(50) NOT NULL,
/*Default course credithour = 3*/
CreditHours int NOT NULL DEFAULT 3
)
go

CREATE INDEX IndexCourseCode on Courses
(
CourseCode ASC
)
go

ALTER TABLE Course
ADD CONSTRAINT CourseCode
CHECK (len(CourseCode)=8)
go

/*Create a table that link student and course "many-to-many"*/
CREATE TABLE StudentRegisterCourse
(
MatricsNo nvarchar(6),
CourseCode varchar(8),

CONSTRAINT PK_StudentCourse PRIMARY KEY (MatricsNo, CourseCode),
/*Calling foreign key*/
CONSTRAINT FK_MatricsNo FOREIGN KEY (MatricsNo) REFERENCES Students(MatricsNo),
CONSTRAINT FK_CourseCode FOREIGN KEY (CourseCode) REFERENCES Courses(CourseCode)
)

------------------------------------------------------------------------------------------------
ALTER TABLE Courses ALTER COLUMN CourseName varchar(100) NOT NULL

/*----------------------------------Courses Data----------------------------------*/
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STID3014', 'Database System & Information Retrieval', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STID3024', 'System Analysis Design', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STID3074', 'IT Project Management', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STID3113', 'Research Methodology in IT', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIJ2024', 'Basic Networking', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIK1014', 'Computer System Organization', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIK2044', 'Operating System', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIN1013', 'Introduction to Artificial Intelligence', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIN2024', 'Logic Programming', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIN2044', 'Knowledge Discovery in Database ', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIN2054', 'Neural Network', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIN2064', 'Machine Learning', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIN2104', 'Knowledge Engineering & Expert Systems ', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIJ3044', 'Routing Protocol Concepts', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIJ3064', 'Distributed Computing', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIJ3074', 'Web Application Developement', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIW2024', 'Software Engineering', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIW2044', 'Mobile Programming', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIW3034', 'Software Testing and Quality Assurance', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIW3044', 'Web Engineering', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIW3054', 'Real-Time Programming', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIW3064', 'Component-Based Development', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STID3154', 'IT Entrepreneurship', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIJ3104', 'Network Management', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIK2024', 'Computer System Architecture', 4)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIV2013', 'Human Computer Interaction', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIV2023', 'Graphic and Computer Animation', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIV2043', 'Digital Audio Technology', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIV3013', 'WWW Programming', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIV3023', 'Multimedia System Networking', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIV3033', 'Multimedia Database', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIV3043', 'Digital Video Technology', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIV3053', 'Internet Technology Services', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIV3063', 'Mobile Multimedia Technology and Ubiquitous Computing', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIV3073', 'Multimedia Seminar', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIV3093', 'Game Application Development', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIV3103', 'User Centered Design', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STIV3113', 'Virtual Reality Technology', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('SCIM3333', 'Film and TV Visual Effects', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('SCIM3343', 'Directing Animation', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('SCCT2063', 'Media Law and Ethics', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('SCCT3033', 'Media Psychology', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('SBLE3133', 'English For Small Group Communication', 3)
INSERT INTO Courses (CourseCode, CourseName, CreditHours)
VALUES ('STQM2103', 'Discrete Structure', 3)

/*----------------------------------Students Data----------------------------------*/
INSERT INTO Students (MatricsNo, StudentName, Gender, PhoneNo, Course, Inasis, Origin)
VALUES ('245278', 'Ng Zheng Yi', 'M', '0174623491', 'BIT', 'Bank Rakyat', 'Kedah')

/*----------------------------------StudentRegisterCourse Data----------------------------------*/
INSERT INTO StudentRegisterCourse (MatricsNo, CourseCode)
VALUES ('245278', 'STID3014')
INSERT INTO StudentRegisterCourse (MatricsNo, CourseCode)
VALUES ('245278', 'STID3113')
INSERT INTO StudentRegisterCourse (MatricsNo, CourseCode)
VALUES ('245278', 'STID3074')
INSERT INTO StudentRegisterCourse (MatricsNo, CourseCode)
VALUES ('245278', 'STIW2044')
INSERT INTO StudentRegisterCourse (MatricsNo, CourseCode)
VALUES ('245278', 'SBLE3133')
INSERT INTO StudentRegisterCourse (MatricsNo, CourseCode)
VALUES ('245278', 'STQM2103')

/*---------------------------------------------- ----------------------------------------------*/
/*--------Assignment 3--------*/
/* Add One(1) Table*/
create table Staff
(
StaffID int not null,
Name varchar(50),
?? varchar(30),
constraint PK_Staff primary key (StaffID)
)

/*Alter One(1) Table*/
alter table Staff
add Gender varchar(6)

/*Update One(1) Column*/


/*Two(2) Simple Queries*/
select FirstName, LastName, City from Customer where City = 'Mexico'
select OrderId, UnitPrice from OrderItem where UnitPrice > 15

/*One(1) Order by*/
select FirstName, LastName, City, Country from Customer order by FirstName, LastName

/*One(1) Distinct*/
select distinct Country from Customer

/*Two(2) Aggregate Function*/
select sum(quantity) from OrderItem
select avg(UnitPrice) from OrderItem

/*Three(3) Subqueries - combining 2 and 3 table*/
select Id, Quantity from OrderItem where Quantity > (select avg(Quantity) from OrderItem)
select Id, Quantity from OrderItem where (UnitPrice, Quantity) in (select UnitPrice, max(Quantity) from OrderItem group by UnitPrice)
select Id, productName, supplierId, Package from Product where Id in (select Id from supplier where Id = 1)

/*Three(3) Multi-table queries - combining 2 and 3 table*/
select * from OrderItem join Orders on OrderItem.Id = Orders.Id
select SupplierId, CompanyName, ContactName from Supplier join Product on Supplier.Id = Product.Id
select * from Customer join OrderItem on Customer.Id = OrderItem.Id join Product on Product.Id = OrderItem.Id
/*---------------------------------------------- ----------------------------------------------*/
